{"version":3,"sources":["Chess.js","utils.js","useBoard.js","App.js","index.js"],"names":["Col","styled","div","props","row","col","ChessElement","value","Chess","onClick","handleClick","useCallback","countTotal","board","currentY","currentX","directionX","directionY","now","tempX","tempY","total","useBoard","useState","Array","fill","setBoard","winner","setWinner","isBlackMoving","useRef","lastRow","lastCol","updateBoard","y","x","newValue","map","handleChessClick","current","useEffect","undefined","every","findWinner","Title","h1","Wrapper","Board","Row","WinnerAlert","WinnerInner","App","window","location","reload","rowIndex","colIndex","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e0c91c9.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport { useCallback } from \"react\";\r\n\r\nconst Col = styled.div`\r\n  width: 30px;\r\n  height: 30px;\r\n  background: #c19d38;\r\n  position: relative;\r\n\r\n  &:before {\r\n    content: \"\";\r\n    height: 100%;\r\n    width: 2px;\r\n    background: black;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n\r\n    ${(props) =>\r\n      props.row === 0 &&\r\n      `\r\n    top: 50%;\r\n    `}\r\n\r\n    ${(props) =>\r\n      props.row === 18 &&\r\n      `\r\n    height: 50%;\r\n    `}\r\n  }\r\n\r\n  &:after {\r\n    content: \"\";\r\n    width: 100%;\r\n    height: 2px;\r\n    background: black;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 0;\r\n    transform: translateY(-50%);\r\n\r\n    ${(props) =>\r\n      props.col === 0 &&\r\n      `\r\n      left: 50%;\r\n    `}\r\n\r\n    ${(props) =>\r\n      props.col === 18 &&\r\n      `\r\n      width: 50%;\r\n    `}\r\n  }\r\n`;\r\n\r\nconst ChessElement = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  transform: scale(0.85);\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1;\r\n\r\n  ${(props) =>\r\n    props.value === \"black\" &&\r\n    `\r\n  background: black;\r\n  `}\r\n\r\n  ${(props) =>\r\n    props.value === \"white\" &&\r\n    `\r\n  background: white;\r\n  `}\r\n`;\r\nconst Chess = ({ row, col, value, onClick }) => {\r\n  const handleClick = useCallback(() => {\r\n    onClick(row, col, value);\r\n  }, [row, col, value, onClick]);\r\n\r\n  return (\r\n    <Col row={row} col={col} onClick={handleClick}>\r\n      <ChessElement value={value} />\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default Chess;\r\n","function countTotal(board, currentY, currentX, directionX, directionY) {\r\n  const now = board[currentY][currentX];\r\n  let tempX = currentX;\r\n  let tempY = currentY;\r\n  let total = 0;\r\n  do {\r\n    tempX += directionX;\r\n    tempY += directionY;\r\n\r\n    if (board[tempY] && board[tempY][tempX] === now) {\r\n      total++;\r\n    } else {\r\n      break;\r\n    }\r\n  } while (true);\r\n  return total;\r\n}\r\n\r\nexport default function findWinner(board, y, x) {\r\n  if (\r\n    countTotal(board, y, x, 1, 0) + countTotal(board, y, x, -1, 0) >= 4 ||\r\n    countTotal(board, y, x, 0, 1) + countTotal(board, y, x, 0, -1) >= 4 ||\r\n    countTotal(board, y, x, 1, 1) + countTotal(board, y, x, -1, -1) >= 4 ||\r\n    countTotal(board, y, x, 1, -1) + countTotal(board, y, x, -1, 1) >= 4\r\n  ) {\r\n    return board[y][x];\r\n  }\r\n\r\n  if (board.every((row) => row.every((col) => col))) {\r\n    return \"draw\";\r\n  }\r\n}\r\n","import { useState, useRef, useCallback, useEffect } from \"react\";\r\nimport findWinner from \"./utils\";\r\n\r\nconst SIZE = 19;\r\n\r\nexport default function useBoard() {\r\n  const [board, setBoard] = useState(Array(SIZE).fill(Array(SIZE).fill(null)));\r\n  const [winner, setWinner] = useState();\r\n\r\n  const isBlackMoving = useRef(true);\r\n\r\n  const lastRow = useRef();\r\n  const lastCol = useRef();\r\n\r\n  const updateBoard = useCallback((y, x, newValue) => {\r\n    setBoard((board) =>\r\n      board.map((row, currentY) => {\r\n        if (currentY !== y) return row;\r\n        return row.map((col, currentX) => {\r\n          if (currentX !== x) return col;\r\n          return newValue;\r\n        });\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const handleChessClick = useCallback(\r\n    (row, col, value) => {\r\n      if (value) return;\r\n\r\n      lastRow.current = row;\r\n      lastCol.current = col;\r\n      updateBoard(row, col, isBlackMoving.current ? \"black\" : \"white\");\r\n      isBlackMoving.current = !isBlackMoving.current;\r\n    },\r\n    [updateBoard]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (lastRow.current === undefined || lastCol.current === undefined) return;\r\n    setWinner(findWinner(board, lastRow.current, lastCol.current));\r\n  }, [board]);\r\n\r\n  return {\r\n    board,\r\n    winner,\r\n\r\n    handleChessClick,\r\n  };\r\n}\r\n","import styled from \"styled-components\";\nimport Chess from \"./Chess\";\nimport useBoard from \"./useBoard\";\n\nconst Title = styled.h1`\n  text-align: center;\n`;\nconst Wrapper = styled.div`\n  text-align: center;\n`;\nconst Board = styled.div`\n  display: inline-block;\n  margin-top: 0;\n`;\n\nconst Row = styled.div`\n  display: flex;\n`;\n\nconst WinnerAlert = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 2;\n`;\n\nconst WinnerInner = styled.div`\n  background: #eeeeee;\n  color: black;\n  height: 300px;\n  width: 300px;\n  padding: 28px;\n  text-align: center;\n`;\n\nfunction App() {\n  const { board, winner, handleChessClick } = useBoard();\n  return (\n    <>\n      <Title>五子棋</Title>\n      {winner && (\n        <WinnerAlert>\n          <WinnerInner>\n            {winner === \"draw\" && \"平手\"}\n            {winner === \"black\" && \"黑棋獲勝\"}\n            {winner === \"white\" && \"白棋獲勝\"}\n            <br />\n            <button onClick={() => window.location.reload()}>\n              再玩一次吧 !\n            </button>\n          </WinnerInner>\n        </WinnerAlert>\n      )}\n      <Wrapper>\n        <Board>\n          {board.map((row, rowIndex) => {\n            return (\n              <Row key={rowIndex}>\n                {row.map((col, colIndex) => {\n                  return (\n                    <Chess\n                      key={colIndex}\n                      row={rowIndex}\n                      col={colIndex}\n                      value={board[rowIndex][colIndex]}\n                      onClick={handleChessClick}\n                    />\n                  );\n                })}\n              </Row>\n            );\n          })}\n        </Board>\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}